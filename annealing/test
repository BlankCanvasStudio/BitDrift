#!/bin/bash


declare -l materialization
scenario=""
topology=""
run_args=""
inventory=""
build=false
generate=false
extra_scenario_path=""
extra_topology_path=""
results_base='./results'
materialization="init.test.$(whoami)"
teardown=false
materialize=false


# Save command executed with
exec_cmd="$0 $@"


show_help() {
    scenario=$1

    if [ ! "$scenario" = "" ]; then
        execute_scenario $scenario -h
        exit 0
    fi

    echo -e "Usage: ./test [options] [scenario] [topology] [run options]"
    echo -e ""
    echo -e "This command orchestrates the varios steps of running a scenario, from generating model files, to materializing, to executing the scenario"
    echo -e ""
    echo -e "-h / --help shows this menu"
    echo -e "-h <scenario> or --help <scenario> will show the scenarios help menu"
    echo -e "-g means the program will automatically generate your model file and ansible inventory for this experiment"
    echo -e "\tYou shouldn't specify a topology file or an ansible inventory when auto generating"
    echo -e "-m will automatically materialize the topology file (either specified on the cli or the generated one)"
    echo -e "\tIf you don't materialize an experiment, we assume the xdc is already connected to the correct one"
    echo -e "-t will automatically tear down the materialization after the experiment is complete"
    echo -e "-b means the program will automatically run all the install playbooks in the 'install' directory against the specified inventory"
    # echo -e "-i allows you to specify the ansible inventory to use"
    # echo -e "\tthe default inventory is 'inventory' in your scenario's directory"
    echo -e "-as <path> allows you to specify the results file path between the scenario and the topology (ie expand throughput/2node/p2p into throughput/2node/udp/p2p without needing to add a new scenario)"
    echo -e "-at <path> allows you to specify the results file path between the topology and the trial (ie expand throughput/2node/p2p/trial into throughput/2node/p2p/udp/trial without needing to add a new scenario)"
    echo -e ""
    echo -e "All trailing options will be passed to your run script"
    echo -e ""
    echo -e "The available scenarios are:"
    cd scenarios
    find . -type f -name "run.sh" -exec echo "  - {}" \; | sed 's|\./||; s|/run\.sh$||'
    cd ..
    echo ""
    echo "The available topologies are:"
    cd topo
    find . -type f -name "model.py" -exec echo "  - {}" \; | sed 's|\./||; s|/model\.py$||'
    cd ..
}


execute_scenario() {
    scenario=$1
    shift
    (cd scenarios/$scenario; mkdir -p ./results || true; ./run.sh $@)
}

build_scenario() {
    set -e
    echo "Building the scenario"
    for file in $(ls ./install); do
        ansible-playbook -i "scenarios/$inventory/inventory" "./install/$file"
    done
    set -x
}

test_login() {
    echo "Testing if you're logged in."
    echo "If it fails, please log in via the mrg binary"
    set -e
    mrg list experiments >> /dev/null
    set +e
}

materialize_topo() {
    test_login

    echo "materializing everything"
    topo=$1
    experiment="${materialization#*.}"
    
    mrg new experiment $experiment

    sleep 3

    output=$(mrg push ./topo/$topology/model.py $experiment)
    rev=$(echo $output | awk '{print $4}')

    sleep 3

    mrg realize $materialization revision $rev

    sleep 3

    mrg materialize $materialization
    sleep 5
}

teardown_topo() {
    test_login

    echo "tearing everything down"
    mrg relinquish $materialization
    experiment="${materialization#*.}"
    mrg delete experiment $experiment
}


get_xdc() {
    echo "$(cat /etc/hostname | sed 's#-.*##')"
}

detach_xdc() {
    xdc=$(get_xdc)    
    mrg xdc detach $xdc
}

attach_xdc() {
    xdc=$(get_xdc)    
    mrg xdc attach $xdc $materialization
}


while [[ $# -gt 0 ]]; do
    if [ ! "$scenario" = "" ] && { { [ "$generate" = "false" ] && [ ! "$topology" = "" ]; } || [ "$generate" = "true" ]; }; then
        run_args+="$@"
        set --
        break
    fi

    case $1 in
        -g)
            shift
            generate=true
            ;;
        -i)
            shift
            inventory="$1"
            shift
            ;;
        -h)
            shift
            show_help
            exit 0
            ;;
        -as)
            shift
            extra_scenario_path="$1"
            shift
            ;;
        -at)
            shift
            extra_topology_path="$1"
            shift
            ;;
        -b)
            shift
            build=true
            ;;
        -t)
            shift
            teardown=true
            ;;
        -m)
            shift
            materialize=true
            # If it matches the materialization regex, its a name
            if [[ $1 =~ ^[a-z][0-9]\.[a-z][0-9]\.[a-z][0-9]$ ]]; then
                materialization=$1
                shift
            fi
            ;;
        *)
            if [ "$scenario" = "" ]; then
                scenario=$1;
                inventory=$1;
            elif [ "$generate" = "false" ]; then
                topology=$1
            fi
            shift
    esac
done

# Allow them to generate without specifying a scenario
if [ "$generate" = "true" ]; then
    echo "generating model and inventory"
    python3 ./topo/build.py
    python3 ./scenarios/build.py
    topology="generated"
    inventory="generated"
elif [ "$topology" = "" ]; then
    echo "topology is empty. Automatically generating a model and inventory files from parameters."
    python3 ./topo/build.py
    python3 ./scenarios/build.py
    topology="generated"
    inventory="generated"
fi

# Allow them to materialize without a scenario
if [ ! -f "./topo/$topology/model.py" ]; then
    echo "topology '$topology' doesn't exist"
    echo "use test -h to see the available scenarios"
    exit 1
fi

# Just make sure the xdc & experiments are set up correctly
if [ "$materialize" = "true" ]; then
    detach_xdc
    teardown_topo
    materialize_topo
    attach_xdc
fi

# Allow them to build without running a scenario
if [ "$inventory" = "" ]; then
    inventory="$scenario"
fi
if [ "$inventory" = "" ]; then
    inventory="$scenario"
fi


if [ ! -f "./scenarios/$inventory/inventory" ]; then
    echo "inventory './scenarios/$inventory/inventory' doesn't exist"
    echo "please specify an inventory"
    exit 1
fi


# Build the scenario
if [ "$build" = "true" ]; then
    build_scenario
fi


# Validate arguments to run scenario
if [  "$scenario" = "" ]; then
    echo "Scenario is empty." 
    if [ "$generate" = "false" ] && [ "$materialize" = "false" ] && [ "$build" = "false" ]; then
        echo "Something is wrong."
    fi
    echo "Exiting."
    exit 1
fi

# Validate the scenario exe exists
if [ ! -f "./scenarios/$scenario/run.sh" ]; then
    echo "scenario '$scenario' doesn't exist"
    echo "use test -h to see the available scenarios"
    exit 1
fi

# Execute the scenario
execute_scenario $scenario $run_args

# Make the results dir in top level
# directory="$(basename ${topology%.*})"
trial="trial_$(date +'%Y%m%d_%H%M%S')"
results_dir="$results_base/$scenario/$extra_scenario_path/$topology/$extra_topology_path/$trial"

echo "results dir: $results_dir"

mkdir -p $results_dir

echo $exec_cmd > $results_dir/cmd

echo mv scenarios/$scenario/results/* $results_dir
mv scenarios/$scenario/results/* $results_dir

echo cp scenarios/$scenario/*config* $results_dir
cp scenarios/$scenario/*config* $results_dir

echo "test completed"

