#!/usr/bin/env sh

daemon=false;
add=""
hydrate=""
run=false
enable=false
load=""
verified_remote_storage_folder=false
ssh_args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
installation_locaion="/usr/local/bin/bitdrift"
default_unison_args=("-auto" "-batch") # "silent")


#
# Preprocessing & Args checking
#

show_help() {
    echo "BitDrift - Git-aware file synchronization manager"
    echo
    echo "Usage: bitdrift [options]"
    echo
    echo "Options:"
    echo "  -d                  Run in daemon mode. Watches files listed in config and syncs on interval."
    echo "  -r, --run           Perform a one-time sync of all configured files."
    echo "  -e, --enable        Enable BitDrift for the current user and start the systemd service for BitDrift."
    echo
    echo "  -a, add <path>      Add one or more absolute paths to the sync watch list."
    echo "                      Usage: -a <path> [-a <path> ...] or -a 'path1 path2 ...'"
    echo
    echo "  -i, ignore <path>   Add one or more absolute paths to the ignore list."
    echo "                      Usage: -i <path> [-i <path> ...] or -i 'path1 path2 ...'"
    echo
    echo "  -h6, hydrate <repo> Hydrate one or more Git repositories listed in the .hydrate file."
    echo "                      Usage: -h6 <repo> [-h6 <repo> ...] or -h6 'repo1 repo2 ...'"
    echo
    echo "  -l, load <path>     Load (download) a remote path to the local machine."
    echo "                      Will try absolute path, then \$PWD/<path>, then ~/path."
    echo
    echo "  -h, --help          Show this help message."
    echo
    echo "BitDrift config files:"
    echo "  Global:       /etc/bitdrift/bitdrift.conf"
    echo "  User-specific: ~/.config/bitdrift/bitdrift.conf"
    echo
    echo "See README for full documentation and examples."
}


while [[ $# -gt 0 ]]; do
    case $1 in
        -d) 
            daemon=true
            shift
            ;;

        add|-a)
            shift
            add="$1 $add"
            shift
            ;;
        ignore|-i)
            shift 
            ignore="$1 $ignore"
            shift
            ;;
        -h6|hydrate)
            shift
            hydrate="$1 $hydrate"
            shift
            ;;
        -r|run)
            run=true
            shift
            ;;
        -e|enable)
            enable=true
            shift
            ;;
        -l|load)
            shift
            load="$1 $load"
            shift
            ;;
        *)
            echo "Unknown command line argument: $1"
            echo "Exiting"
            exit 1
    esac
done



#
# Create a local config directory if one doesn't exist
#
mkdir -p ~/.config/bitdrift



#
# Load the configs for everyone
#
source_config_file() {
    if [ ! -f "$1" ]; then
        echo "Couldn't find config file '$1'. Skipping..."
        return
    fi

    echo "Sourcing config $1"

    files=()
    ignore=()
    section=""
    while IFS= read -r line; do
        [[ $line =~ ^\[[^]]+\]$ ]] && section="${line//[\[\]]/}" && continue
        [[ -z $line || $line == \#* ]] && continue

        case "$section" in
            files) files+=("$line") ;;
            ignore) ignore+=("$line") ;;
            general)
                eval "$line"
                ;;
        esac
    done < $1 # /etc/bitdrift/bitdrift.conf
}


source_configs() {
    source_config_file /etc/bitdrift/bitdrift.conf
    if [ -f ~/.config/bitdrift/bitdrift.conf ]; then
        source_config_file ~/.config/bitdrift/bitdrift.conf
    fi
}


source_configs




#
# Readable function definitions
#



check_set_e() {
    if [ ! "$(shopt -o errexit | grep 'on')" = "" ]; then
        echo true
    else 
        echo false
    fi
}


make_absolute() {
    if [[ "$1" =~ ^/.*$ ]]; then
        echo $1
    else
        echo "$(pwd)/$1" | sed -E 's#/+#/#g'
    fi
}


make_remote() {
    echo "$(echo "/$remote_host_storage_folder/$1" | sed "s#$HOME#/home/-$remote_hostname-#" | sed -E 's#/+#/#g')"
}


add_files() {
    # Add materials to check if we are sudo here
    for file in "$@"; do
        file=$(make_absolute "$file")
        sed -i "/^\[files\]/a\\$file" ~/.config/bitdrift/bitdrift.conf
    done
}


ignore_files() {
    # Add materials to check if we are sudo here
    for file in "$@"; do
        file=$(make_absolute "$file")
        sed -i "/^\[ignore\]/a\\$file" ~/.config/bitdrift/bitdrift.conf
    done
}


verify_connection() {
    # From docs
    # unison -testServer a.tmp ssh://remotehostname/a.tmp
    echo "true"
}


verify_remote_storage_folder() {
    if [ "$verified_remote_storage_folder" = "false" ]; then
        ssh $ssh_args $remote_hostname "sudo mkdir -p $remote_host_storage_folder"
        ssh $ssh_args $remote_hostname "sudo chmod u=rwx,g=rwx,o=rwx $remote_host_storage_folder"
        verified_remote_storage_folder=true
    fi
}


sync_file_with_remote_host() {
    verify_remote_storage_folder

    extra_args=()

    # Check the directory for any nested git repos
    # Ignore them in unison, but add a hydration file so we can restore them easily later
    if [ -d "$1" ]; then
        # Get all the nested files
        echo "Scanning: $1"
        all_files=$(find "$1" -type f | sed "s#$1[/]##")
        # Get all the non-git files (ie the ones we want to save)
        # non_git_files=$(echo "$all_files" | grep -vFf <(echo "$relative_git_roots" | sed 's#$#/#'))
        # Get all the git roots
        # relative_git_roots=$(echo $all_files | grep "\/\.git\/" | sed "s#$1##" 's#\/\.git\/.*$##' | sort -u)
        echo "Treating git repos in: $1"
        relative_git_roots=$(printf "%s\n" "$all_files" |
            grep '/\.git/' |
            sed 's#/\.git/.*##' |
            sort -u |
            awk '
            {
                keep = 1
                for (i in seen) {
                    if ($0 ~ "^" seen[i] "/") keep = 0
                    else if (seen[i] ~ "^" $0 "/") delete seen[i]
                }
                if (keep) seen[++n] = $0
            }
            END {
                for (i = 1; i <= n; i++) print seen[i]
            }')
        # Get the urls from the git repo
        echo "Building hydration file for: $1"
        hydration_info=""
        pushd .
            for repo in $relative_git_roots; do
                cd "$1/$repo"
                url=$(git ls-remote --get-url $(git config branch.$(git rev-parse --abbrev-ref HEAD).remote))
                branch=$(git rev-parse --abbrev-ref HEAD)
                commit=$(git rev-parse HEAD)
                hydration_info="$hydration_info $repo|$url|$branch|$commit"
                extra_args+=("-ignore" "Path $repo")
                # extra_args="$extra_args -ignore 'Path $repo'"
            done
        popd

        # Create hydration file at root
        # TODO: handle branch switches? Pretty sure I want git to manage itself
        for info in $hydration_info; do
            # If relative path not in hydration file, add it. Otherwise, skip. Let git manage itself
            touch $1/.hydrate
            if [ "$(grep -r "$(echo $info | sed 's#:.*##')" $1/.hydrate)" = "" ]; then
                echo "$info" >> "$1/.hydrate"
            fi
        done
    fi

    # Add extra ignore locations if they are on the current path
    for location in ${ignore[@]}; do
        if [ ! $(echo "$location" | grep "^$1") = "" ]; then
            extra_args+=("-ignore" "Path $(echo $location | sed "s#$1[/]*##")")
        fi
    done

    remote_folder=$(make_remote "$1")
    local_folder=$(echo $1 | sed -E 's#/+#/#g')
    ssh $ssh_args $remote_hostname "mkdir -p $remote_folder"
    # echo unison "$local_folder" "ssh://$remote_hostname/$remote_folder" $unison_args "${default_unison_args[@]}" "${extra_args[@]}" -sshargs "$ssh_args"
    unison "$local_folder" "ssh://$remote_hostname/$remote_folder" $unison_args "${default_unison_args[@]}" "${extra_args[@]}" -sshargs "$ssh_args"
}


get_watched_files() {
    echo $files
}


sync_all_files() {
    verify_remote_storage_folder

    files=$(get_watched_files)
    echo "files before sync: $files"

    echo "Syncing files..."
    for file in ${files[@]}; do
        echo "Syncing: $file"
        sync_file_with_remote_host $file
    done

    echo "Done syncing"
}


hydrate() {
    repo=$1

    if [ -d ./$repo ]; then
        echo "repo $repo exists. delete and try hydrating again"
        return
    fi

    IFS='|' read -ra parts <<< "$(grep "$repo" ./.hydrate | head -1)"

    folder=${parts[0]}
    url=${parts[1]}
    branch=${parts[2]}
    hash=${parts[3]}

    mkdir -p $folder
    git clone --branch $branch $url $folder
}

enable_bitdrift() {
    if [ ! -f ~/.config/bitdrift/bitdrift.conf ]; then
        mkdir -p ~/.config/bitdrift
        touch ~/.config/bitdrift/bitdrift.conf
        # Add basic entries of config
        for el in [general] "" [files] "" [ignore] ""; do
            echo $el >> ~/.config/bitdrift/bitdrift.conf
        done
    fi

    sudo systemctl enable bitdrift
    sudo systemctl start  bitdrift
}


does_remote_path_exist() {
    remote_folder=$(make_remote $1)
    ls_output=$(ssh $ssh_args $remote_hostname "ls $remote_folder" 2>&1)
    if [[ "$ls_output" =~ .*No\ such\ file\ or\ directory$ ]]; then
        echo false
    else 
        echo true
    fi
}


load() {

    # Adjust how this searches for remote repos so we can have different usernames on each system
    # Also, loading things should add them to the "files" path
    # What should we do about ignores??

    echo "Loading '$1'"

    path=$1

    if [ -d $1 ]; then
        echo "Directory '$(pwd)/$1' exists. Please delete and try again."
        return
    fi

    # Its an absolute path, so load it
    if [[ "$path" =~ ^\/.*$ ]]; then
        if [ ! "$(does_remote_path_exist $path)" = "true" ]; then
            echo "Absolute path '$path' provided, but not found on server. Perhaps the users are wrong? Skipping"
            return
        fi

        if ! mkdir -p "$1"; then
            echo "couldn't make directory: '$1'. Can't properly load. Skipping..."
            return
        fi

        cd $1
        remote_folder=$(make_remote $path)
        echo "hostname: $remote_hostname"
        unison "ssh://$remote_hostname/$remote_folder" "$rel_path"  $unison_args "${default_unison_args[@]}" "${extra_args[@]}" -sshargs "$ssh_args"

        return
    fi


    # Try absolute path in current directory, then try from ~
    paths=("$(pwd)/$path" "$(echo ~/$path | sed "s|~|$HOME|")")

    for path in ${paths[@]}; do
        if [ "$(does_remote_path_exist $path)" = "true" ]; then

            if ! mkdir -p "$1"; then
                echo "couldn't make directory: '$(pwd)/$1'. Can't properly load. Skipping..."
                continue
            fi

            cd $1
            remote_folder=$(make_remote $path)
            unison "ssh://$remote_hostname/$remote_folder" "$rel_path"  $unison_args "${default_unison_args[@]}" "${extra_args[@]}" -sshargs "$ssh_args"

            return

        fi
    done

    echo "Couldn't find any of the following paths: "
    for path in ${paths[@]}; do
        echo "$path"
    done
    echo -e "Skipping...\n\n"
}



#
# Actual run-time code
#

if [ ! "$add" = "" ]; then
    add_files "$add"    
    echo "Added: $add"
fi


if [ ! "$ignore" = "" ]; then
    ignore_files "$ignore"    
fi


if [ "$daemon" = "true" ]; then
    while true; do
        for user in $(ls /home); do
            if [ -f /home/$user/.config/bitdrift/bitdrift.conf ]; then
                echo "$user is syncing files..."
                sudo -u "$user" bash -c "$installation_locaion run"
            fi
        done

        # Sync as root too
        if [ -f /root/.config/bitdrift/bitdrift.conf ]; then
            echo "root is syncing files..."
            sync_all_files
        fi

        echo "Sleeping ($frequency)"
        sleep $frequency
    done
fi


if [ "$run" = "true" ]; then

    echo "files at start: ${file[@]}"

    sync_all_files
fi


if [ ! "$hydrate" = "" ]; then
    for repo in $hydrate; do
        hydrate $repo
    done
fi


if [ "$enable" = "true" ]; then
    enable_bitdrift
fi


if [ ! "$load" = "" ]; then
    for el in $load; do
        load $el
    done
fi

